
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://gcqxucvaepbksgmipxst.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImdjcXh1Y3ZhZXBia3NnbWlweHN0Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDc1NzE4MDksImV4cCI6MjA2MzE0NzgwOX0.FjspgdfrFNTLatvcJjghdHbLQQ2dK0TVjoTK9YPa78U";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    persistSession: true,
    autoRefreshToken: true,
    storage: window.localStorage,
  }
});

// Define a custom type for course progress that we use until Supabase types are updated
type UserCourseProgress = {
  id: string;
  user_id: string;
  course_id: number;
  completed_modules: number[];
  last_accessed_module: number;
  progress_percentage: number;
  created_at: string;
  updated_at: string;
};

// Course data helpers
export const fetchUserCourseProgress = async (userId: string, courseId: number) => {
  // Use a custom type assertion since our table might not be reflected in the types yet
  const { data, error } = await supabase
    .from('user_course_progress')
    .select('*')
    .eq('user_id', userId)
    .eq('course_id', courseId)
    .single();
  
  if (error && error.code !== 'PGSQL_ERROR_NO_DATA_FOUND') {
    console.error('Error fetching user course progress:', error);
    return null;
  }
  
  return data as UserCourseProgress | null;
};

export const updateModuleCompletion = async (
  userId: string, 
  courseId: number, 
  moduleId: number, 
  completed: boolean
) => {
  // First, get existing progress
  const progress = await fetchUserCourseProgress(userId, courseId);
  
  if (!progress) {
    // Create new progress entry if it doesn't exist
    const { error } = await supabase
      .from('user_course_progress')
      .insert({
        user_id: userId,
        course_id: courseId,
        completed_modules: completed ? [moduleId] : [],
        last_accessed_module: moduleId,
        progress_percentage: completed ? 12.5 : 0 // 1/8 modules = 12.5%
      });
      
    if (error) {
      console.error('Error creating user course progress:', error);
      return false;
    }
  } else {
    // Update existing progress
    let completedModules = progress.completed_modules || [];
    
    if (completed && !completedModules.includes(moduleId)) {
      completedModules.push(moduleId);
    } else if (!completed) {
      completedModules = completedModules.filter(id => id !== moduleId);
    }
    
    const { error } = await supabase
      .from('user_course_progress')
      .update({
        completed_modules: completedModules,
        last_accessed_module: moduleId,
        progress_percentage: (completedModules.length / 8) * 100 // Assuming 8 modules
      })
      .eq('user_id', userId)
      .eq('course_id', courseId);
      
    if (error) {
      console.error('Error updating user course progress:', error);
      return false;
    }
  }
  
  return true;
};
